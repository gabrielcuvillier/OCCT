// This file has been automatically generated from resource file src/Shaders/PhongSpotLight.glsl

static const char Shaders_PhongSpotLight_glsl[] =
  "void occSpotLight (in int  theId,\n"
  "                   in vec3 theNormal,\n"
  "                   in vec3 theView,\n"
  "                   in vec3 thePoint,\n"
  "                   in bool theIsFront,\n"
  "                   in float theShadow)\n"
  "{\n"
  "  vec3 aLight = occLight_Position (theId) - thePoint;\n"
  "  float aDist = length (aLight);\n"
  "  float aRange = occLight_Range (theId);\n"
  "  float anAtten = occPointLightAttenuation (aDist, aRange, occLight_LinearAttenuation (theId), occLight_ConstAttenuation (theId));\n"
  "  if (anAtten <= 0.0) return;\n"
  "  aLight /= aDist;\n"
  "  vec3 aSpotDir = occLight_SpotDirection (theId);\n"
  "  // light cone\n"
  "  float aCosA = dot (aSpotDir, -aLight);\n"
  "  if (aCosA >= 1.0 || aCosA < cos (occLight_SpotCutOff (theId)))\n"
  "  {\n"
  "    return;\n"
  "  }\n"
  "  float anExponent = occLight_SpotExponent (theId);\n"
  "  if (anExponent > 0.0)\n"
  "  {\n"
  "    anAtten *= pow (aCosA, anExponent * 128.0);\n"
  "  }\n"
  "  vec3 aHalf = normalize (aLight + theView);\n"
  "  vec3  aFaceSideNormal = theIsFront ? theNormal : -theNormal;\n"
  "  float aNdotL = max (0.0, dot (aFaceSideNormal, aLight));\n"
  "  float aNdotH = max (0.0, dot (aFaceSideNormal, aHalf ));\n"
  "  float aSpecl = 0.0;\n"
  "  if (aNdotL > 0.0)\n"
  "  {\n"
  "    aSpecl = pow (aNdotH, occMaterial_Shininess (theIsFront));\n"
  "  }\n"
  "  Diffuse  += occLight_Diffuse (theId) * aNdotL * anAtten * theShadow;\n"
  "  Specular += occLight_Specular(theId) * aSpecl * anAtten * theShadow;\n"
  "}\n";
